{"version":3,"sources":["AddressFormField.tsx","AddressForm.tsx","PaymentFormField.tsx","PaymentForm.tsx","Review.tsx","Stepper.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddressFormField","label","name","as","TextField","helperText","initialValues","first_name","last_name","address","city","zip_code","nameSchema","Yup","shape","required","AddressForm","submit","prevValues","setFormValues","onSubmit","values","validationSchema","dirty","isValid","className","disabled","type","PaymentFormField","Card_Number","CVV","Expiry_Date","PaymentForm","Review","console","log","onClick","useStyles","makeStyles","theme","root","width","backButton","marginRight","spacing","instructions","marginTop","marginBottom","getStepContent","stepIndex","setStep","formValues","HorizontalLabelPositionBelowStepper","classes","React","useState","activeStep","setActiveStep","steps","Stepper","alternativeLabel","map","Step","StepLabel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.903070df.chunk.js","sourcesContent":["import React from \"react\";\nimport { Field, ErrorMessage } from \"formik\";\nimport { TextField } from \"@material-ui/core\";\nimport \"./App.css\";\ninterface FormFieldProps {\n  label: string;\n  name: string;\n}\n\nconst AddressFormField: React.FC<FormFieldProps> = ({ label, name }) => {\n  return (\n      <Field\n        as={TextField}\n        name={name}\n        label={label}\n        helperText={<ErrorMessage name={name} />}\n      />\n  );\n};\n\nexport default AddressFormField;\n","import React from \"react\";\nimport { Formik, Form} from \"formik\";\nimport * as Yup from \"yup\";\nimport AddressFormField from \"./AddressFormField\";\n\ninterface FormValues {\n  first_name: string;\n  last_name: string;\n  address: string;\n  city: string;\n  zip_code: string;\n}\n\nconst initialValues: FormValues = {\n  first_name: \"\",\n  last_name: \"\",\n  address: '',\n  city: '',\n  zip_code: '',\n};\n\nconst nameSchema = Yup.object().shape({\n  first_name: Yup.string().required(),\n  last_name: Yup.string().required(),\n  address: Yup.string().required(),\n  city: Yup.string().required(),\n  zip_code: Yup.number().required(),\n});\n\nconst AddressForm = ({submit,prevValues, setFormValues}: any) => {\n  const onSubmit = (values: FormValues): void => {\n    submit(1)\n    setFormValues({ ...values, ...prevValues })\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={nameSchema}\n    >\n      {({ dirty, isValid }) => {\n        return (\n          <Form>\n            <div className=\"form\"> \n              <AddressFormField label=\"First Name\" name=\"first_name\" />\n              <AddressFormField label=\"Last Name\" name=\"last_name\"/>\n              <AddressFormField label=\"Address\" name=\"address\"/>\n              <AddressFormField label=\"City\" name=\"city\" />\n              <AddressFormField label=\"Zip Code\" name=\"zip_code\"/>\n              <button disabled={!dirty || !isValid} type=\"submit\">\n                Next\n              </button>\n            </div>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddressForm;\n","import React from \"react\";\nimport { Field, ErrorMessage } from \"formik\";\nimport { TextField } from \"@material-ui/core\";\nimport \"./App.css\";\ninterface FormFieldProps {\n  label: string;\n  name: string;\n  type: string;\n}\n\nconst PaymentFormField: React.FC<FormFieldProps> = ({ label, name, type }) => {\n  return (\n    <Field\n      as={TextField}\n      name={name}\n      label={label}\n      helperText={<ErrorMessage name={name} />}\n      type={type}\n    />\n  );\n};\n\nexport default PaymentFormField;\n","import React from \"react\";\nimport { Formik, Form} from \"formik\";\nimport * as Yup from \"yup\";\nimport PaymentFormField from \"./PaymentFormField\";\n\ninterface FormValues {\n  Card_Number: string;\n  CVV: string;\n  Expiry_Date: string;\n}\n\nconst initialValues:FormValues = {\n  Card_Number: '',\n  CVV: '',\n  Expiry_Date: '',\n};\n\nconst nameSchema = Yup.object().shape({\n  Card_Number: Yup.number().required(),\n  CVV: Yup.number().required(),\n  Expiry_Date: Yup.date().required(),\n});\n\nconst PaymentForm = ({submit,prevValues, setFormValues}: any) => {\n  const onSubmit = (values: FormValues): void => {\n    submit(2)\n    setFormValues({ ...values, ...prevValues })\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={nameSchema}\n    >\n      {({ dirty, isValid }) => {\n        return (\n          <Form>\n            <div className=\"form\"> \n              <PaymentFormField type='number' label=\"Card Number\" name=\"Card_Number\" />\n              <PaymentFormField type='number' label=\"CVV\" name=\"CVV\"/>\n              <PaymentFormField type='date' label=\"\" name=\"Expiry_Date\"/>\n              <button disabled={!dirty || !isValid} type=\"submit\">\n                Next\n              </button>\n            </div>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default PaymentForm;\n","import React from \"react\";\nimport \"./App.css\";\nconst Review = ({ values, submit }: any) => {\n  console.log(values);\n  return (\n    <div className=\"form\">\n      <h1>Review</h1>\n      <p>First Name: {values.first_name}</p>\n      <p>Last Name: {values.last_name}</p>\n      <p>Address: {values.address}</p>\n      <p>City: {values.city}</p>\n      <p>Zip Code: {values.zip_code}</p>\n      <p>Card Number: {values.Card_Number}</p>\n      <p>CVV: {values.CVV}</p>\n      <p>Expiry Date: {values.Expiry_Date}</p>\n      <button type=\"submit\" onClick={() => submit(3)}>Confirm</button>\n    </div>\n  );\n};\n\nexport default Review;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport AddressForm from \"./AddressForm\";\nimport PaymentForm from \"./PaymentForm\";\nimport Review from \"./Review\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  backButton: {\n    marginRight: theme.spacing(1),\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nfunction getSteps() {\n  return [\"Add Address\", \"Add payment\", \"Review\", \"Submitted\"];\n}\n\nfunction getStepContent(\n  stepIndex: any,\n  setStep: any,\n  setFormValues: any,\n  formValues: any\n) {\n  switch (stepIndex) {\n    case 0:\n      return (\n        <AddressForm\n          submit={setStep}\n          prevValues={formValues}\n          setFormValues={setFormValues}\n        />\n      );\n    case 1:\n      return (\n        <PaymentForm\n          submit={setStep}\n          prevValues={formValues}\n          setFormValues={setFormValues}\n        />\n      );\n    case 2:\n      return <Review submit={setStep} values={formValues} />;\n    case 3:\n      return <div className='form'>\"Your details have been submitted successfully\"</div>;\n    default:\n      return \"Unknown stepIndex\";\n  }\n}\n\nexport default function HorizontalLabelPositionBelowStepper() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [formValues, setFormValues] = React.useState({});\n  const steps = getSteps();\n\n  return (\n    <div className={classes.root}>\n      <Stepper activeStep={activeStep} alternativeLabel>\n        {steps.map((label) => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n          </Step>\n        ))}\n      </Stepper>\n      {getStepContent(activeStep, setActiveStep, setFormValues, formValues)}\n    </div>\n  );\n}","import React from 'react'\nimport Stepper from './Stepper'\n\nconst App =() => {\n    return (\n        <div>\n            <Stepper />\n        </div>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}